#!/usr/bin/env python

import sys, getopt, subprocess, re, readline, os, shlex, tempfile, shutil, ast, socket

def usage():
    sys.stderr.write('Usage: %s [-E pattern | -L host,... | -N nodegroup]\n' % sys.argv[0].split('/')[-1])

class Shalt(object):
    _timeout = 3
    _defaultDir = '/root'
    _defaultCmd = 'cmd.run'
    _saltCmds = ['test.ping',
                'test.version',
                'status.loadavg',
                'status.uptime',
                'puppet.enable',
                'puppet.disable',
                'puppet.noop',
                'puppet.run',
                'puppet.status',
            ]

    _modes = {'MAIN':'main',
             'SELECT':'select'
    }

    _prompts = {'MAIN':'>',
               'SELECT':'>>>'
    }

    _MI = 3
    _path = "PATH+=:/usr/local/bin:/usr/local/sbin:/opt/puppetlabs/bin; "

    def __init__(self, target):
        self._cmd = []
        self._origcmd = []
        self._mode = self._modes['MAIN']
        self._subselect = False
        self._prompt = self._prompts['MAIN']
        self._minions = shlex.split(target)
        self._cwd = self._defaultDir
        self._origcwd = self._defaultDir
        self._curdir = ''
        self._matches = []
        self._devnull = open('/dev/null','w')
        self._bg = False
        self._jobs = []
        self._hostname = socket.gethostname()

    def _help(self):
        sys.stdout.write('Enter your commands as if running in a shell. "exit" or "quit" to stop.\n')
        sys.stdout.write('Ctrl-C to cancel a command. Ctrl-G to abort a reverse history search (via Ctrl-R).\n\n')
        sys.stdout.write('To run a command in the background: bg <command>\n')
        sys.stdout.write('To retrieve background jobs: jobs [job id]\n\n')
        sys.stdout.write('To select a subset of minions, use "select [minions] [command]". Commands will only run on this subset.\n')
        sys.stdout.write('Select examples:\n')
        sys.stdout.write('\tselect\n')
        sys.stdout.write('\tselect list-of-minions\n')
        sys.stdout.write('\tselect list-of-minions command\n\n')
        sys.stdout.write('List of other available salt modules:\n')
        for i in self._saltCmds:
            sys.stdout.write("  %s\n" % i)

        sys.stdout.write('\nType "help" at any time to display this message.\n\n')

    def _list_dir(self, root=None):
        if not root:
            targetdir = self._cwd
        elif not root.startswith('/'):
            targetdir = self._cwd + '/' + root
        else:
            targetdir = root

        stat = self._cmd[:]
        stat += ['stat -c "%n:::%F" *', 'cwd=%s' % targetdir, '--out=json', '--static']
        p = subprocess.Popen(stat, stdout=subprocess.PIPE)
        out, err = p.communicate()

        try:
            statout = ast.literal_eval(out)
        except:
            sys.stderr.write('Tab completion error!\n')
            return None

        common = set()
        for i in statout:
            if len(common) == 0:
                common = set(statout[i].split('\n'))
            else:
                common = common.intersection(set(statout[i].split('\n')))

        files = list(common)
        files.sort()

        res = []
        for f in files:
            n,t = f.split(':::')
            if t == 'directory':
                res.append(n + '/')
            else:
                res.append(n)

        return res

    def _complete_path(self, path=None):
        if not path:
            return self._list_dir()

        dirname, basename = os.path.split(path)
        res = []
        for p in self._list_dir(dirname):
            if p.startswith(basename):
                res.append(os.path.join(dirname, p))

        if len(res) >= 1:
            return res
        else:
            return [path]

    def _tab_complete(self, text, state):
        rlbuff = readline.get_line_buffer().split()

        if state == 0:
            if not rlbuff or len(rlbuff) < 2:
                self._matches = self._complete_path()
            else:
                self._matches = self._complete_path(rlbuff[-1])

        try:
            result = self._matches[state]
        except IndexError:
            result = None

        return result

    def run_shell(self):
        self._cmd = ['salt', '--timeout=%s' % self._timeout]
        self._cmd += self._minions
        self._cmd += [self._defaultCmd]

        readline.set_completer(self._tab_complete)
        readline.set_completer_delims(' ')
        readline.parse_and_bind('tab: complete')

        self._help()

        while True:
            if self._bg:
                self._bg = False
            try:
                line = raw_input('[%s] %s%s ' % (self._mode, self._cwd, self._prompt)).strip()
            except EOFError:
                sys.stdout.write('\n')
                return
            except KeyboardInterrupt:
                sys.stderr.write('\nKeyboard interrupt\n')
                continue

            if line in ['exit', 'quit']:
                if self._subselect:
                    self._prompt = self._prompts['MAIN']
                    self._cmd = self._origcmd[:]
                    self._mode = self._modes['MAIN']
                    self._subselect = False
                    self._cwd = self._origcwd
                    continue

                break

            if re.search('^bg +', line) != None:
                self._bg = True
                line = re.sub('^bg +','', line).strip()
                if not line:
                    continue

            if re.search('^cd +|^cd$', line) != None:
                oldcwd = self._cwd
                arg = re.sub('^cd +|^cd$', '', line).strip()
                if arg != '/':
                    arg = arg.rstrip('/')

                if arg == '':
                    self._cwd = self._defaultDir
                    continue

                if arg.startswith('/'):
                    self._cwd = ''
                    arg = arg.lstrip('/')

                for d in arg.split('/'):
                    if d == '..':
                        self._cwd = self._cwd.rsplit('/', 1)[0]
                    else:
                        if self._cwd == '/':
                            self._cwd += d
                        else:
                            self._cwd += '/%s' % d
                if self._cwd == '':
                    self._cwd = '/'

                run = self._cmd[:]
                run += ['cd %s' % self._cwd]
                try:
                    junk = subprocess.check_call(run, stdout=self._devnull, stderr=self._devnull)
                except:
                    sys.stderr.write("ERROR: could not cd to '%s'\n" % re.sub('^ *cd +|^ *cd *$', '', line))
                    self._cwd = oldcwd
                    continue

            elif re.search('^history$', line) != None:
                readline.write_history_file(history_filename)
                counter = 1
                try:
                    with open(history_filename, 'r') as histfile:
                        for line in histfile:
                            print("%d: %s" % (counter, line.strip()))
                            counter += 1
                        histfile.close()
                except:
                    pass

                continue

            elif line == '':
                continue

            elif line in ['help', '?']:
                self._help()
                continue

            elif line in self._saltCmds:
                run = self._cmd[:]
                run[run.index(self._defaultCmd)] = line

            elif re.search('^(sel|select) *', line) != None:
                if self._subselect:
                    sys.stderr.write('Already in subselect mode.\n')
                    continue

                minions = []
                args = shlex.split(line)
                if len(args) == 1:
                    testrun = self._cmd[:]
                    testrun[testrun.index(self._defaultCmd)] = 'test.ping'
                    testrun[self._MI] = "'%s'" % testrun[self._MI]
                    ping = ' '.join(testrun) + '|grep -B1 True|grep :|sed -e "s/ \+.\+//" -e "s/:$//"'
                    try:
                        p = subprocess.Popen(ping, stdout=subprocess.PIPE, stderr=self._devnull, shell=True)
                        out, err = p.communicate()
                        minions = out.split()
                        minions.sort()
                        i = 1
                        sys.stdout.write('Select minions by typing their number separated by space:\n')
                        for m in minions:
                            sys.stdout.write('%d:\t%s\n' % (i, m))
                            i += 1
                        selection = raw_input('selection> ').strip().split()
                        if len(selection) < 1:
                            sys.stderr.write('No minions were selected.\n')
                            continue

                        error = False
                        for i in selection:
                            if int(i) < 1 or int(i) > len(minions):
                                sys.stderr.write('Selection out of range: %s\n' % i)
                                error = True
                                break

                        if error:
                            continue
                        else:
                            self._subselect = True
                            self._origcmd = self._cmd[:]
                            self._mode = self._modes['SELECT']
                            self._prompt = self._prompts['SELECT']
                            self._origcwd = self._cwd
                            self._cmd = ['salt', '--timeout=%s' % self._timeout, '-L']

                            sel = ''
                            for i in selection:
                                sel += '%s,' % minions[int(i)-1]
                            self._cmd += ['%s' % sel.rstrip(','), self._defaultCmd]

                    except:
                        sys.stderr.write('Could not ping minions.\n')

                    continue

                elif len(args) == 2:
                    self._subselect = True
                    self._origcmd = self._cmd[:]
                    self._mode = self._modes['SELECT']
                    self._prompt = self._prompts['SELECT']
                    self._origcwd = self._cwd
                    self._cmd = ['salt', '--timeout=%s' % self._timeout, '-E', '%s' % args[1], self._defaultCmd]
                    continue

                line = re.sub('^ *%s *%s *' % (args[0], re.escape(args[1])), '', line)
                run = ['salt', '--timeout=%s' % self._timeout, '-E', args[1]]
                if not args[2] in self._saltCmds:
                    run += ['cmd.run', "cwd='%s'" % self._cwd, self._path + line]
                else:
                    run += [line]

            elif re.search('^(job|jobs) *', line) != None:
                args = shlex.split(line)
                if len(args) == 1:
                    count = 1
                    for job in self._jobs:
                        sys.stdout.write('%s: %s\n' % (count, job[1]))
                        count += 1
                    continue

                elif len(args) == 2:
                    try:
                        jid = self._jobs[int(args[1])-1][0]
                        getjob = ['salt', '--timeout=%s' % self._timeout, '-E', self._hostname, 'cmd.run']
                        getjob += ['salt-run jobs.lookup_jid %s' % jid, '--out=newline_values_only']
                        p = subprocess.Popen(getjob)
                        p.communicate()
                    except:
                        sys.stderr.write('Could not retrieve job %s.\n' % args[1])

                    continue

            elif re.search('^(edit|vi|vim) +', line) != None:
                if not self._subselect:
                    sys.stderr.write('Select ONE minion first before using edit feature\n')
                    continue

                testrun = self._cmd[:]
                testrun[testrun.index(self._defaultCmd)] = 'test.ping'
                ping = ' '.join(testrun) + '|grep True|wc -l'
                p = subprocess.Popen(ping, stdout=subprocess.PIPE, stderr=self._devnull, shell=True)
                out, err = p.communicate()
                if int(out) != 1:
                    sys.stderr.write('Edit feature only works when ONE minion is selected.\n')
                    continue

                filename = shlex.split(line)[1]
                cat = self._cmd[:]
                cat += ["cwd='%s'" % self._cwd, self._path + 'cat %s; echo "XXXXX"' % filename, '--out=newline_values_only']
                try:
                    p = subprocess.Popen(cat, stdout=subprocess.PIPE, stderr=self._devnull)
                    out, err = p.communicate()
                except:
                    sys.stderr.write('Error reading %s.\n' % filename)
                    continue

                tempd = tempfile.mkdtemp()
                buf = os.path.basename(filename)
                with open('%s/%s' % (tempd, buf), 'w') as origfile:
                    origfile.write(out)
                with open('%s/%s.copy' % (tempd, buf), 'w') as copyfile:
                    subprocess.call(['head','-n', '-1', '%s/%s' % (tempd, buf)], stdout=copyfile)
                shutil.copy('%s/%s.copy' % (tempd, buf), '%s/%s' % (tempd, buf))

                subprocess.call(['/usr/bin/vim', '%s/%s' % (tempd, buf)])

                p = subprocess.Popen(['diff', '-u', '%s/%s.copy' % (tempd, buf), '%s/%s' % (tempd, buf)], stdout=subprocess.PIPE, stderr=self._devnull)
                diff, err = p.communicate()
                shutil.rmtree(tempd)
                if len(diff.strip()) == 0:
                    sys.stdout.write('No change to original file. Edit cancelled.\n')
                    continue

                mktemp = self._cmd[:]
                mktemp += [self._path + 'mktemp', '--out=newline_values_only']
                p = subprocess.Popen(mktemp, stdout=subprocess.PIPE, stderr=self._devnull)
                tempf, err = p.communicate()

                saltwrite = self._cmd[:]
                saltwrite.insert(saltwrite.index(self._defaultCmd), '--')
                saltwrite[saltwrite.index(self._defaultCmd)] = 'file.write'
                saltwrite += [tempf, '%s' % diff]
                try:
                    subprocess.call(saltwrite, stdout=self._devnull, stderr=self._devnull)
                except:
                    sys.stderr.write('Could not write to %s. Change might be too big?\n' % filename)
                    continue

                if not filename.startswith('/'):
                    filename = self._cwd + '/' + filename

                saltpatch = self._cmd[:]
                saltpatch[saltpatch.index(self._defaultCmd)] = 'file.patch'
                saltpatch += [filename, tempf]
                try:
                    subprocess.call(saltpatch, stdout=self._devnull, stderr=self._devnull)
                except:
                    sys.stderr.write('Unknown error writing to file.\n')
                    continue

                delpatch = self._cmd[:]
                delpatch += [self._path + '\rm %s' % tempf]
                subprocess.call(delpatch, stdout=self._devnull, stderr=self._devnull)

                continue

            else:
                run = self._cmd[:]
                run += ["cwd='%s'" % self._cwd]
                run += [self._path + line]

            if self._bg:
                run += ['--async']
                p = subprocess.Popen(run, stdout=subprocess.PIPE, stderr=self._devnull)
            else:
                p = subprocess.Popen(run)

            try:
                out, err = p.communicate()
                if out and self._bg:
                    self._jobs.append((out.split()[-1], line))
            except KeyboardInterrupt:
                p.kill()
                sys.stderr.write('\nKeyboard interrupt\n')

        self._devnull.close()

if __name__ == '__main__':
    target = ''

    try:
        options, args = getopt.getopt(sys.argv[1:], 'hE:L:N:')
    except getopt.GetoptError, err:
        sys.stderr.write(str(err) + '\n')
        usage()
        sys.exit(1)

    for opt, arg in options:
        if opt == '-E':
            if target != '':
                usage()
                sys.exit(1)
            target = '-E %s' % arg
        if opt == '-L':
            if target != '':
                usage()
                sys.exit(1)
            target = '-L %s' % arg
        if opt == '-N':
            if target != '':
                usage()
                sys.exit(1)
            target = '-N %s' % arg
        if opt == '-h':
            usage()
            sys.exit(0)

    if target == '':
        usage()
        sys.exit(1)

    local = os.path.expanduser('~/.local')
    try:
        os.mkdir(local)
    except:
        pass

    history_filename = local + '/shalt'
    if os.path.exists(history_filename):
        readline.read_history_file(history_filename)

    shalt = Shalt(target)
    shalt.run_shell()

    readline.write_history_file(history_filename)
